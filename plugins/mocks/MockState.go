// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/jumppad-labs/hclconfig/types"
)

// MockState is an autogenerated mock type for the State type
type MockState struct {
	mock.Mock
}

type MockState_Expecter struct {
	mock *mock.Mock
}

func (_m *MockState) EXPECT() *MockState_Expecter {
	return &MockState_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: pattern
func (_m *MockState) Find(pattern string) ([]types.Resource, error) {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []types.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]types.Resource, error)); ok {
		return rf(pattern)
	}
	if rf, ok := ret.Get(0).(func(string) []types.Resource); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockState_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockState_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - pattern string
func (_e *MockState_Expecter) Find(pattern interface{}) *MockState_Find_Call {
	return &MockState_Find_Call{Call: _e.mock.On("Find", pattern)}
}

func (_c *MockState_Find_Call) Run(run func(pattern string)) *MockState_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_Find_Call) Return(_a0 []types.Resource, _a1 error) *MockState_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockState_Find_Call) RunAndReturn(run func(string) ([]types.Resource, error)) *MockState_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockState) Get(key string) (types.Resource, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 types.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (types.Resource, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) types.Resource); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockState_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockState_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockState_Expecter) Get(key interface{}) *MockState_Get_Call {
	return &MockState_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockState_Get_Call) Run(run func(key string)) *MockState_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockState_Get_Call) Return(_a0 types.Resource, _a1 error) *MockState_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockState_Get_Call) RunAndReturn(run func(string) (types.Resource, error)) *MockState_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockState creates a new instance of MockState. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockState(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockState {
	mock := &MockState{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
