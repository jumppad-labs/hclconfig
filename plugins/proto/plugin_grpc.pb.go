// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: plugins/plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_GetTypes_FullMethodName = "/proto.PluginService/GetTypes"
	PluginService_Validate_FullMethodName = "/proto.PluginService/Validate"
	PluginService_Create_FullMethodName   = "/proto.PluginService/Create"
	PluginService_Destroy_FullMethodName  = "/proto.PluginService/Destroy"
	PluginService_Refresh_FullMethodName  = "/proto.PluginService/Refresh"
	PluginService_Changed_FullMethodName  = "/proto.PluginService/Changed"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main plugin service (runs in plugin process)
type PluginServiceClient interface {
	GetTypes(ctx context.Context, in *GetTypesRequest, opts ...grpc.CallOption) (*GetTypesResponse, error)
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	Changed(ctx context.Context, in *ChangedRequest, opts ...grpc.CallOption) (*ChangedResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) GetTypes(ctx context.Context, in *GetTypesRequest, opts ...grpc.CallOption) (*GetTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTypesResponse)
	err := c.cc.Invoke(ctx, PluginService_GetTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, PluginService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, PluginService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Destroy(ctx context.Context, in *DestroyRequest, opts ...grpc.CallOption) (*DestroyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DestroyResponse)
	err := c.cc.Invoke(ctx, PluginService_Destroy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, PluginService_Refresh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Changed(ctx context.Context, in *ChangedRequest, opts ...grpc.CallOption) (*ChangedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangedResponse)
	err := c.cc.Invoke(ctx, PluginService_Changed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
//
// Main plugin service (runs in plugin process)
type PluginServiceServer interface {
	GetTypes(context.Context, *GetTypesRequest) (*GetTypesResponse, error)
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	Changed(context.Context, *ChangedRequest) (*ChangedResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) GetTypes(context.Context, *GetTypesRequest) (*GetTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTypes not implemented")
}
func (UnimplementedPluginServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedPluginServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPluginServiceServer) Destroy(context.Context, *DestroyRequest) (*DestroyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedPluginServiceServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedPluginServiceServer) Changed(context.Context, *ChangedRequest) (*ChangedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Changed not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_GetTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).GetTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_GetTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).GetTypes(ctx, req.(*GetTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Destroy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Destroy(ctx, req.(*DestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Changed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Changed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Changed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Changed(ctx, req.(*ChangedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTypes",
			Handler:    _PluginService_GetTypes_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _PluginService_Validate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _PluginService_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _PluginService_Destroy_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PluginService_Refresh_Handler,
		},
		{
			MethodName: "Changed",
			Handler:    _PluginService_Changed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/plugin.proto",
}

const (
	HostCallbackService_Info_FullMethodName  = "/proto.HostCallbackService/Info"
	HostCallbackService_Debug_FullMethodName = "/proto.HostCallbackService/Debug"
	HostCallbackService_Warn_FullMethodName  = "/proto.HostCallbackService/Warn"
	HostCallbackService_Error_FullMethodName = "/proto.HostCallbackService/Error"
	HostCallbackService_Get_FullMethodName   = "/proto.HostCallbackService/Get"
	HostCallbackService_Find_FullMethodName  = "/proto.HostCallbackService/Find"
)

// HostCallbackServiceClient is the client API for HostCallbackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Host callback service (run in host process) - consolidated logger and state
type HostCallbackServiceClient interface {
	// Logger methods
	Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Debug(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	// State methods
	Get(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error)
	Find(ctx context.Context, in *StateFindRequest, opts ...grpc.CallOption) (*StateFindResponse, error)
}

type hostCallbackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostCallbackServiceClient(cc grpc.ClientConnInterface) HostCallbackServiceClient {
	return &hostCallbackServiceClient{cc}
}

func (c *hostCallbackServiceClient) Info(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCallbackServiceClient) Debug(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Debug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCallbackServiceClient) Warn(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Warn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCallbackServiceClient) Error(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Error_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCallbackServiceClient) Get(ctx context.Context, in *StateGetRequest, opts ...grpc.CallOption) (*StateGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateGetResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostCallbackServiceClient) Find(ctx context.Context, in *StateFindRequest, opts ...grpc.CallOption) (*StateFindResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StateFindResponse)
	err := c.cc.Invoke(ctx, HostCallbackService_Find_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostCallbackServiceServer is the server API for HostCallbackService service.
// All implementations must embed UnimplementedHostCallbackServiceServer
// for forward compatibility.
//
// Host callback service (run in host process) - consolidated logger and state
type HostCallbackServiceServer interface {
	// Logger methods
	Info(context.Context, *LogRequest) (*LogResponse, error)
	Debug(context.Context, *LogRequest) (*LogResponse, error)
	Warn(context.Context, *LogRequest) (*LogResponse, error)
	Error(context.Context, *LogRequest) (*LogResponse, error)
	// State methods
	Get(context.Context, *StateGetRequest) (*StateGetResponse, error)
	Find(context.Context, *StateFindRequest) (*StateFindResponse, error)
	mustEmbedUnimplementedHostCallbackServiceServer()
}

// UnimplementedHostCallbackServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostCallbackServiceServer struct{}

func (UnimplementedHostCallbackServiceServer) Info(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedHostCallbackServiceServer) Debug(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debug not implemented")
}
func (UnimplementedHostCallbackServiceServer) Warn(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (UnimplementedHostCallbackServiceServer) Error(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Error not implemented")
}
func (UnimplementedHostCallbackServiceServer) Get(context.Context, *StateGetRequest) (*StateGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHostCallbackServiceServer) Find(context.Context, *StateFindRequest) (*StateFindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedHostCallbackServiceServer) mustEmbedUnimplementedHostCallbackServiceServer() {}
func (UnimplementedHostCallbackServiceServer) testEmbeddedByValue()                             {}

// UnsafeHostCallbackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostCallbackServiceServer will
// result in compilation errors.
type UnsafeHostCallbackServiceServer interface {
	mustEmbedUnimplementedHostCallbackServiceServer()
}

func RegisterHostCallbackServiceServer(s grpc.ServiceRegistrar, srv HostCallbackServiceServer) {
	// If the following call pancis, it indicates UnimplementedHostCallbackServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HostCallbackService_ServiceDesc, srv)
}

func _HostCallbackService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Info(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCallbackService_Debug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Debug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Debug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Debug(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCallbackService_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Warn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Warn(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCallbackService_Error_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Error(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Error_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Error(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCallbackService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Get(ctx, req.(*StateGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostCallbackService_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateFindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostCallbackServiceServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HostCallbackService_Find_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostCallbackServiceServer).Find(ctx, req.(*StateFindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostCallbackService_ServiceDesc is the grpc.ServiceDesc for HostCallbackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostCallbackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.HostCallbackService",
	HandlerType: (*HostCallbackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _HostCallbackService_Info_Handler,
		},
		{
			MethodName: "Debug",
			Handler:    _HostCallbackService_Debug_Handler,
		},
		{
			MethodName: "Warn",
			Handler:    _HostCallbackService_Warn_Handler,
		},
		{
			MethodName: "Error",
			Handler:    _HostCallbackService_Error_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _HostCallbackService_Get_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _HostCallbackService_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/plugin.proto",
}
