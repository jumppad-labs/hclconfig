// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockStateStore is an autogenerated mock type for the StateStore type
type MockStateStore struct {
	mock.Mock
}

type MockStateStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStateStore) EXPECT() *MockStateStore_Expecter {
	return &MockStateStore_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with no fields
func (_m *MockStateStore) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateStore_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockStateStore_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockStateStore_Expecter) Clear() *MockStateStore_Clear_Call {
	return &MockStateStore_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *MockStateStore_Clear_Call) Run(run func()) *MockStateStore_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateStore_Clear_Call) Return(_a0 error) *MockStateStore_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateStore_Clear_Call) RunAndReturn(run func() error) *MockStateStore_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Exists provides a mock function with no fields
func (_m *MockStateStore) Exists() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockStateStore_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockStateStore_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
func (_e *MockStateStore_Expecter) Exists() *MockStateStore_Exists_Call {
	return &MockStateStore_Exists_Call{Call: _e.mock.On("Exists")}
}

func (_c *MockStateStore_Exists_Call) Run(run func()) *MockStateStore_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateStore_Exists_Call) Return(_a0 bool) *MockStateStore_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateStore_Exists_Call) RunAndReturn(run func() bool) *MockStateStore_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with no fields
func (_m *MockStateStore) Load() (interface{}, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStateStore_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockStateStore_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
func (_e *MockStateStore_Expecter) Load() *MockStateStore_Load_Call {
	return &MockStateStore_Load_Call{Call: _e.mock.On("Load")}
}

func (_c *MockStateStore_Load_Call) Run(run func()) *MockStateStore_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStateStore_Load_Call) Return(_a0 interface{}, _a1 error) *MockStateStore_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStateStore_Load_Call) RunAndReturn(run func() (interface{}, error)) *MockStateStore_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: config
func (_m *MockStateStore) Save(config interface{}) error {
	ret := _m.Called(config)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStateStore_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockStateStore_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - config interface{}
func (_e *MockStateStore_Expecter) Save(config interface{}) *MockStateStore_Save_Call {
	return &MockStateStore_Save_Call{Call: _e.mock.On("Save", config)}
}

func (_c *MockStateStore_Save_Call) Run(run func(config interface{})) *MockStateStore_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockStateStore_Save_Call) Return(_a0 error) *MockStateStore_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStateStore_Save_Call) RunAndReturn(run func(interface{}) error) *MockStateStore_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStateStore creates a new instance of MockStateStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStateStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStateStore {
	mock := &MockStateStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
